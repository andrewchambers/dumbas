%prefix "asmparser"

%value "Parsev"

line <- s:stmt eol { $$ = s; }
      / eol { $$.kind = ASM_BLANK; }
      / . { $$.kind = ASM_SYNTAX_ERROR; }

stmt <- d:directive {$$ = d;}
      / i:instr { $$ = i; }
      / l:label {  $$ = l; } 

directive <- ".glob" "o"? "l" ws i:ident
             { $$.globl = (Globl){.kind = ASM_DIR_GLOBL, .name = i.ident.name }; }
           / ".data" { $$.kind = ASM_DIR_DATA; }
           / ".text" { $$.kind = ASM_DIR_TEXT; }
           / ".balign" ws n:number 
             { $$.balign = (Balign){.kind = ASM_DIR_BALIGN, .align = n.number.v }; }
           / ".byte" ws n:number
             { $$.byte = (Byte){.kind = ASM_DIR_BYTE, .b = (uint8_t)n.number.v }; }

label <- i:ident ':'
         { $$.label = (Label){.kind = ASM_LABEL, .name = i.ident.name}; }

instr <- "nop"{ $$.kind = ASM_NOP; }
       / "leave" { $$.kind = ASM_LEAVE; }
       / "ret" { $$.kind = ASM_RET; }
       / i:jmp { $$ = i; }
       / i:add { $$ = i; }

jmp <- "jmp" ws i:ident
       { $$.jmp = (Jmp){.kind = ASM_JMP, .target = i.ident.name}; }

add <- "add" 'q'? ws s:m ws? ',' ws? d:r64
     { $$.add = mkadd('q', s, d); }
     / "add" 'q'? ws s:imm ws? ',' ws? d:r64
     { $$.add = mkadd('q', s, d); }
     / "add" 'q'? ws s:r64 ws? ',' ws? d:m
     { $$.add = mkadd('q', s, d); }
     / "add" 'q'? ws s:r64 ws? ',' ws? d:r64
     { $$.add = mkadd('q', s, d); }
     / "addq" ws s:imm ws? ',' ws? d:m
     { $$.add = mkadd('q', s, d); }

m <- '(' ws? r:r64 ws? ')'
   {  $$.memarg = (Memarg){ .kind = ASM_MEMARG, .c = 0, .l = NULL, .reg = r.kind  };  }
   / <'-'?[0-9]+> ws? '(' ws? r:r64 ws? ')'
   { $$.memarg = (Memarg){ .kind = ASM_MEMARG, .c = strtoll($1, NULL, 10), .l = NULL, .reg = r.kind  };  }
   / i:ident  ws? '(' ws? r:r64 ws? ')'
   { $$.memarg = (Memarg){ .kind = ASM_MEMARG, .c = 0, .l = i.ident.name, .reg = r.kind  };  }

r64 <- "%rax" { $$.kind = ASM_RAX; }
     / "%rcx" { $$.kind = ASM_RCX; }
     / "%rdx" { $$.kind = ASM_RDX; }
     / "%rbx" { $$.kind = ASM_RBX; }
     / "%rsp" { $$.kind = ASM_RSP; }
     / "%rbp" { $$.kind = ASM_RBP; }
     / "%rsi" { $$.kind = ASM_RSI; }
     / "%rdi" { $$.kind = ASM_RDI; }
     / "%r8"  { $$.kind = ASM_R8; }
     / "%r9"  { $$.kind = ASM_R9; }
     / "%r10" { $$.kind = ASM_R10; }
     / "%r11" { $$.kind = ASM_R11; }
     / "%r12" { $$.kind = ASM_R12; }
     / "%r13" { $$.kind = ASM_R13; }
     / "%r14" { $$.kind = ASM_R14; }
     / "%r15" { $$.kind = ASM_R15; }

imm <- '$' i:ident
       { $$.imm = (Imm){.kind = ASM_IMM, .l = i.ident.name, .c = 0 };  }
     / '$' <'-'?[0-9]+>
       { $$.imm = (Imm){.kind = ASM_IMM, .l = NULL, .c = strtoll($1, NULL, 10) }; }

ident <- <[_a-zA-Z][_a-zA-Z0-9]*>
         { $$.ident = (Ident){ .kind = ASM_IDENT, .name = xstrdup($1) }; } 

number <- <'-'?[0-9]+>
          { $$.number = (Number){ .kind = ASM_NUMBER, .v = strtoll($1, NULL, 10) }; }

ws <- [ \t]+

eol <- ws? ("\n" / (! .))

%source {

static Parsev *dupv(Parsev *p) { 
  Parsev *r = xmalloc(sizeof(Parsev));
  *r = *p;
  return r;
}

static Add mkadd(char t, Parsev s, Parsev d) {
  return (Add){ .kind = ASM_ADD, .type = 'q', .src = dupv(&s), .dst = dupv(&d) };
}

}