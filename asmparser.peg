%prefix "asmparser"

%value "Parsev"


line <- s:stmt eol { $$ = s; }
      / eol { $$.kind = ASM_BLANK; }
      / . { $$.kind = ASM_SYNTAX_ERROR; }

stmt <- d:directive {$$ = d;}
      / i:instr { $$ = i; }
      / l:label {  $$ = l; } 

directive <- ".glob" "o"? "l" ws i:ident
             { $$.globl = (Globl){.kind = ASM_DIR_GLOBL, .name = i.ident.name }; }
           / ".data" { $$.kind = ASM_DIR_DATA; }
           / ".text" { $$.kind = ASM_DIR_TEXT; }
           / ".balign" ws n:number 
             { $$.balign = (Balign){.kind = ASM_DIR_BALIGN, .align = n.number.value }; }
           / ".byte" ws n:number
             { $$.byte = (Byte){.kind = ASM_DIR_BYTE, .b = (uint8_t)n.number.value }; }

instr <- "nop"{ $$.kind = ASM_NOP; }
       / "leave" { $$.kind = ASM_LEAVE; }
       / "ret" { $$.kind = ASM_RET; }
       / "jmp" ws i:ident
          { $$.jmp = (Jmp){.kind = ASM_JMP, .target = i.ident.name}; }
       / "pushq" ws v:r64
         { $$.pushq = (Pushq){.kind = ASM_PUSHQ, .arg = dupv(&v)}; }
       / "pushq" ws v:imm
         { $$.pushq = (Pushq){.kind = ASM_PUSHQ, .arg = dupv(&v)}; }
       / "movq" ws s:r64 ws? "," ws? d:r64
         { $$.movq = (Movq){.kind = ASM_MOVQ, .src = dupv(&s), .dst = dupv(&d)}; }
       / "xorl" ws s:r32 ws? "," ws? d:r32
         { $$.xorl = (Xorl){.kind = ASM_XORL, .src = dupv(&s), .dst = dupv(&d)}; }

label <- i:ident ':'
         { $$.label = (Label){.kind = ASM_LABEL, .name = i.ident.name}; }

imm <- '$' n:number { $$ = n; }
     / '$' i:ident { $$ = i; }

r64 <- "%rax" { $$.kind = ASM_RAX; }
     / "%rcx" { $$.kind = ASM_RCX; }
     / "%rdx" { $$.kind = ASM_RDX; }
     / "%rbx" { $$.kind = ASM_RBX; }
     / "%rsp" { $$.kind = ASM_RSP; }
     / "%rbp" { $$.kind = ASM_RBP; }
     / "%rsi" { $$.kind = ASM_RSI; }
     / "%rdi" { $$.kind = ASM_RDI; }

r32 <- "%eax" { $$.kind = ASM_EAX; }
     / "%ecx" { $$.kind = ASM_ECX; }
     / "%edx" { $$.kind = ASM_EDX; }
     / "%ebx" { $$.kind = ASM_EBX; }
     / "%esp" { $$.kind = ASM_ESP; }
     / "%ebp" { $$.kind = ASM_EBP; }
     / "%esi" { $$.kind = ASM_ESI; }
     / "%edi" { $$.kind = ASM_EDI; }

number <- <[0-9]+>
          { $$.number = (Number){ .kind = ASM_NUMBER, .value = strtoll($1, NULL, 10) }; } 

ident <- <[_a-zA-Z][_a-zA-Z0-9]*>
         { $$.ident = (Ident){ .kind = ASM_IDENT, .name = xstrdup($1) }; } 

ws <- [ \t]+

eol <- ws? ("\n" / (! .))

%source {
  Parsev *dupv(Parsev *p) { 
    Parsev *r = xmalloc(sizeof(Parsev));
    *r = *p;
    return r;
  }
}